#include<stdio.h>
#include<stdlib.h>
#define bool int
#define false 0
#define true 1
#define MAX 64
int n, sum, max;
int pop1 = 0;
int push1 = 0;
int a[MAX];

struct s_data
{
    int a[MAX];
    int n;
    int top;
};

typedef struct s_data Stack;

void init(Stack *s)
{
    s->n = 0;
    s->top = MAX - 1;
}

bool is_empty(Stack *s)
{
    return 0 == s->n;
}

bool is_full(Stack *s)
{
    return MAX == s->n;
}

int pop(Stack *s)
{
    if(is_empty(s))
        exit(1);
    int r = s->a[s->top];
    s->top = (s->top - 1 + MAX) % MAX;
    s->n--;
    //printf("pop %d\n", r);
    pop1++;
    return r;
}

void push(Stack *s, int i)
{
    if(is_full(s))
        exit(1);
    s->top = (s->top + 1) % MAX;
    s->n++;
    s->a[s->top] = i;
    push1++;
    //printf("push %d\n", i);
}

int max_int(int a, int b)
{
    if(a > b)
        return a;
    else
        return b;
}

bool valid(int p)
{
    //printf("try %d\n", p);
    int i, j, t, top;
    int len = 0;
    int u[64] = {false};
    Stack s;
    init(&s);
    i = 0;
    while(s.n < n)
    {
        if(i == n)
        {
            t = i = pop(&s);
            if(is_empty(&s))
                break;
            u[i] = false;
            len = (len - a[i] + p) % p;
            while(i < n && a[i] == a[t])
                i++;
            if(i == top && i != 0)
                i = n;
            continue;
        }
        if(false == u[i])
        {
            if(len == 0)
                top = i;
            if(len + a[i] <= p)
            {
                push(&s, i);
                u[i] = true;
                len = (len + a[i]) % p;
                if(len == 0)
                {
                    i = 0;
                    continue;
                }
            }
            else
            {
                //i = n;
                //continue;
            }
        }
        i++;
    }
    return s.n == n;
}

int cmp(const void *a, const void *b)
{
    return -(*(int *)a - *(int *)b);
}

int main()
{
    int i;
    while(scanf("%d", &n) && n != 0)
    {
        max = sum = 0;
        for(i = 0; i < n; i++)
        {
            scanf("%d", &a[i]);
            sum += a[i];
            max = a[i] > max?a[i]:max;
        }
        qsort(a, n, sizeof(a[0]), &cmp);
        for(i = max; i <= sum; i++)
        {
            if(sum % i == 0)
            {
                if(valid(i))
                {
                    printf("%d\n", i);
                    break;
                }
            }
        }
    }
    printf("pop %d push %d\n", pop1, push1);
    return 0;
}
