#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cassert>
using namespace std;
char matrix[3][3];
char x[2];
char m[2000001];
int d;
bool solve;

bool valid(char matrix[3][3])
{
    int i;
    for(i = 0; i < 8; i++)
        if(matrix[i / 3][i % 3] != '1' + i)
            return false;
    return true;
}

void search()
{
    int r;
    d = 0;
    solve = false;
    while(d < 2000000)
    {
        r = rand() % 4;
        switch(r)
        {
            case 0:
                //up
                if(x[0] > 0)
                {
                    matrix[x[0]][x[1]] = matrix[x[0] - 1][x[1]];
                    matrix[x[0] - 1][x[1]] = 'x';
                    x[0] --;
                    m[d++] = 'u';
                }
                break;
            case 1:
                //down
                if(x[0] < 2)
                {
                    matrix[x[0]][x[1]] = matrix[x[0] + 1][x[1]];
                    matrix[x[0] + 1][x[1]] = 'x';
                    x[0] ++;
                    m[d++] = 'd';
                }
                break;
            case 2:
                //left
                if(x[1] > 0)
                {
                    matrix[x[0]][x[1]] = matrix[x[0]][x[1] - 1];
                    matrix[x[0]][x[1] - 1] = 'x';
                    x[1] --;
                    m[d++] = 'l';
                }
                break;
            case 3:
                //right
                if(x[1] < 2)
                {
                    matrix[x[0]][x[1]] = matrix[x[0]][x[1] + 1];
                    matrix[x[0]][x[1] + 1] = 'x';
                    x[1] ++; 
                    m[d++] = 'r';
                }
                break;
        }
        if(valid(matrix))
        {
            m[d++] = '\0';
            solve = true;
            break;
        }
    }
}


int main()
{
    char s[2];
    int i;
#ifdef _POJ
    freopen("poj1077.txt", "r", stdin);
#endif
    while(scanf("%s", s) != EOF)
    {
        matrix[0][0] = s[0];
        for(i = 1; i < 9; i++)
        {
            scanf("%s", s);
            matrix[i / 3][i % 3] = s[0];
        }

        for(i = 0; i < 9; i++)
            if(matrix[i / 3][i % 3] == 'x')
            {
                x[0] = i / 3;
                x[1] = i % 3;
            }
#ifdef _TEST
        assert(valid(matrix) == false);
        char xx[3][3] = {'1', '2', '3', '4', '5', '6', '7', '8', 'x'};
        assert(valid(xx) == true);
#endif
        search();
        if(solve)
            printf("%s\n", m);
        else
            printf("unsolvable");
    }
    return 0;
}

